<?php
/**
* Ninuxoo 2.0
*
* PHP Version 5.3
*
* @copyright 2013-2014 Alessandro Gubitosi / Gubi (http://iod.io)
* @license http://www.gnu.org/licenses/gpl-3.0.html GNU General Public License, version 3
* @link https://github.com/gubi/Ninuxoo-2.0
*/

/**
* A class for scan files in NAS device and store the listing in defined directory
*
* _
*
* @package	Ninuxoo 2.0
* @author		Alessandro Gubitosi <gubi.ale@iod.io>
* @license 	http://www.gnu.org/licenses/gpl-3.0.html GNU General Public License, version 3
* @access		public
* @link		https://github.com/gubi/Ninuxoo-2.0/blob/master/common/include/classes/scan.class.php
* @uses		rsa.class.php Rsa class
* @todo		Clean deprecated functions
*/
class scan {
	/**
	* Construct
	*
	* Initialize the class
	*
	* @global string $this->class_dir Current class directory
	* @global string $this->dir Conf directory, based on $this->class_dir
	* @global string $this->nas_shares Shared directories as set in the scan_shares file
	* @subpackage PEAR/Config/Lite.php
	* @return void
	*/
	function __construct() {
		$this->class_dir = __DIR__;
		$this->dir = str_replace("classes", "conf", $this->class_dir);
		$this->nas_shares = explode("\n", file_get_contents(str_replace("//", "/", $this->dir . "/") . "scan_shares"));
	}
	/**
	* Start calculating execution time
	*
	* @return int $mtime The start of execution time
	* @access  private
	*/
	public function start_time() {
		$mtime = microtime();
		$mtime = explode(" ", $mtime);
		$mtime = $mtime[1] + $mtime[0];
		return $mtime;
	}
	
	/**
	* End calculating execution time
	*
	* @param int $startime The time start of execution
	* @return int The end of execution time
	* @access private
	*/
	public function end_time($startime) {
		$mtime = microtime();
		$mtime = explode(" ", $mtime);
		$mtime = $mtime[1] + $mtime[0];
		return round($mtime - $startime, 5);
	}
	
	/**
	* Set the header for text output
	*
	* @return string The text output header
	* @access public
	*/
	public function text_header() {
		$header = str_repeat("-", 100) . "\n";
		$header .= "# NinuXoo Local scanning \n";
		$header .= "# " . date("Y-m-d H:i:s") . "\n";
		$header .= str_repeat("-", 100) . "\n";
		$header .= "Start scanning...\n";
		
		return $header;
	}
	
	/**
	* Generates output statistics for a given directory array
	*
	* @param array $curr_dir Directory tree
	* @return string Directory statistics output text
	* @access private
	*/
	private function statistics($curr_dir) {
		$curr = implode("\n -> ", $curr_dir);
		$stats = "\n" . count($curr_dir) . " directories in shares:\n";
		$stats .= " -> " . $curr . "\n\n";
		
		return $stats;
	}
	
	/**
	* Generates output
	*
	* @param string $type Output format
	* @param string $stats statistics output text
	* @param string $end_time Elapsed time
	* @param array $share_dir Shared directories
	* @see scan::get_config() Parse configuration file
	* @see scan::text_header() Text_header
	* @return string $output
	* @access private
	*/
	private function output($type = "", $stats = "", $end_time = "", $share_dir) {
		$config = $this->get_config();
		
		switch($type) {
			case "ajax":
				return " done.\n";
				break;
			case "json":
				return json_encode(array("data" => array("date" => date("Y-m-d"), "elapsed_time" => $end_time, "files_count" => count($share_dir))));
				break;
			default:
				$output = $this->text_header();
				$output .= $stats;
				$output .= count($share_dir) . " files listed in: " . $config["NAS"]["listing_file_dir"] . "listing\n";
				$output .= "listing file crypted by RSA 2048 bit.\n\n";
				$output .= "Elapsed time: " . $end_time . " seconds\n";
				$output .= str_repeat("-", 100) . "\n";
				$output .= "Goodbye.\n";
				
				return $output;
				break;
		}
	}
	
	/**
	* Parse the config.ini file
	*
	* @see scan::__construct() Construct
	* @return void|array Error or the config.ini parsed array
	* @access private
	*/
	private function get_config() {
		if (!file_exists($this->dir . "/config.ini")) {
			return "error: no `config.ini` file.\nPlease, run setup before.\n\nNothing to scan.\nExit";
			exit();
		} else {
			return parse_ini_file($this->dir . "/config.ini", true);
		}
	}
	
	/**
	* Update the config file with the la scan date
	*
	* @param int $startime The time to insert in config
	* @see scan::__construct() Construct
	* @see scan::end_time() End_time
	* @uses PEAR/Config.php PEAR/Config
	* @return int The time of script execution
	* @access private
	*/
	private function update_config($startime) {
		if (!class_exists("Config_Lite", false)) {
			require_once("Config/Lite.php");
		}
		$end_time = $this->end_time($startime);
		$config = new Config_Lite();
		$config->read($this->dir . "/config.ini");
		
		$config->set("NAS", "last_scan_date", date("Y-m-d"));
		$config->set("NAS", "last_items_count", count(explode("\n", $this->listing)));
		$config->set("NAS", "last_scanning_time", $end_time);
		
		return $end_time;
	}
	
	/**
	* Scan a directory in search of files
	*
	* @param int startime The time to insert in config
	* @see scan::__construct() Construct
	* @see scan::get_config() Get_config
	* @return string The file listing
	* @access private
	*/
	private function scan() {
		$get_config = $this->get_config();
		foreach($this->nas_shares as $scan_dir){
			$share_ = array();
			
			$splitted_dir = array_values(array_filter(explode("/", trim(str_replace("./", "", str_replace("//", "/", $get_config["NAS"]["root_share_dir"] . "/" . $scan_dir))))));
			$this->listing .= shell_exec("find " . str_replace(" ", "\ ", escapeshellcmd(str_replace("//", "/", $get_config["NAS"]["root_share_dir"] . "/" . $scan_dir))) . " -mindepth 1 | sort");
		}
		return $this->listing;
	}
	
	/**
	* Launch the session
	*
	* @param string $type Output format
	* @see scan::__construct() Construct
	* @see scan::start_time() Start_time
	* @see scan::get_config() Get_config
	* @see scan::scan() Scan
	* @see scan::update_config() Update_config
	* @see scan::statistics() Statistics
	* @see scan::output() Output
	* @uses rsa.class.php RSA Class
	* @return void The output defined in output() function
	* @access public
	*/
	public function save($type = "") {
		if (!class_exists("rsa", false)) {
			require($this->class_dir . "/rsa.class.php");
		}
		$rsa = new rsa();
		
		$startime = $this->start_time();
		$get_config = $this->get_config();
		
		$scan = $this->scan();
		sort($this->nas_shares);
		foreach($this->nas_shares as $f) {
			$info = pathinfo($f);
			$shares[] = $info["basename"];
			$scans = str_replace(array("///", "//"), "/", str_replace($get_config["NAS"]["root_share_dir"], "", $scan));
		}
		/*
		SAVE LISTING
		*/
		ob_start();
		$scanz = explode("\n", $scans);
		foreach($scanz as $kl => $line) {
			if($kl == 0) {
				$listing_file = fopen($get_config["NAS"]["listing_file_dir"] . "/listing", "w+");
			} else {
				$listing_file = fopen($get_config["NAS"]["listing_file_dir"] . "/listing", "a+");
			}
			if(strlen($line) > 0) {
				$scanned_lines = "[{\"id\":\"" . $kl . "\",";
				$scanned_lines .= "\"path\":\"" . addslashes($line) . "\"}]\n";
				
				if(strlen(pathinfo(str_replace("//", "/", $get_config["NAS"]["root_share_dir"] . "/" . $line), PATHINFO_EXTENSION)) == 0) {
					//$scanned_lines .= "\"hash\":\"\"}]\n";
				} else {
					//$scanned_lines .= "\"hash\":\"" . str_replace("\n", "", $rsa->simple_private_encrypt(str_replace(array("///", "//"), "/", $get_config["NAS"]["root_share_dir"] . "/" . $line))) . "\"}]\n";
				}
			}
			fwrite($listing_file, $scanned_lines);
			ob_flush();
			flush();
		}
		$scanned_lines .= "]";
		@chmod($get_config["NAS"]["listing_file_dir"] . "/listing", 0777);
		
		$end_time = $this->update_config($startime);
		$stats = $this->statistics($shares);
		print $this->output($type, $stats, $end_time, explode("\n", $scans));
	}
	
}
?>

